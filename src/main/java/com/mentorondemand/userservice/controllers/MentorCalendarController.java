package com.mentorondemand.userservice.controllers;

import java.util.HashMap;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.mentorondemand.userservice.entities.MentorCalendar;
import com.mentorondemand.userservice.entities.Users;
import com.mentorondemand.userservice.services.MentorCalendarRepository;
import com.mentorondemand.userservice.services.UserRepository;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(path = "/v1/mc")
public class MentorCalendarController {
	@Autowired // This means to get the bean called mentorCalendarRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private MentorCalendarRepository mentorCalendarRepository;
	@Autowired
	private UserRepository userRepository;

	@PostMapping(path = "/addOrUpdate")
	public @ResponseBody Object addOrUpdateMentorCalendar(@Valid @RequestBody MentorCalendar mc) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		return mentorCalendarRepository.save(mc);
	}

	@DeleteMapping(path = "/remove/{id}")
	public @ResponseBody String removeMentorCalendar(@PathVariable(value = "id") Integer id) {
		mentorCalendarRepository.deleteById(id);
		return "Removed";
	}

	@GetMapping(path = "/all/{userName}")
	public @ResponseBody Object getMentorCalendar(@PathVariable(value = "userName") String userName) {
		Optional<Users> optional = userRepository.findByUserName(userName);
		HashMap<String, Boolean> map = new HashMap<>();

		if (optional.isPresent()) {
			Users user = optional.get();
			// This returns a JSON or XML with the users
			return mentorCalendarRepository.findAllByUser(user);
		} else {
			// user not exist
			map.put("userExist", false);
			return map;
		}
	}
}
