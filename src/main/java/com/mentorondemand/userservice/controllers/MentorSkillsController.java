package com.mentorondemand.userservice.controllers;

import java.util.HashMap;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.mentorondemand.userservice.entities.Users;
import com.mentorondemand.userservice.services.MentorSkillsRepository;
import com.mentorondemand.userservice.services.UserRepository;

@RestController
@RequestMapping(path = "/v1/ms")
public class MentorSkillsController {
	@Autowired // This means to get the bean called mentorCalendarRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private MentorSkillsRepository mentorSkillsRepository;
	@Autowired
	private UserRepository userRepository;

	@PostMapping(path = "/save")
	public @ResponseBody String saveMentorSkills(@RequestParam String userName, @RequestParam String skillNames) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Optional<Users> optional = userRepository.findByUserName(userName);

		if (optional.isPresent()) {
			Users user = optional.get();
			// This returns a JSON or XML with the users
			mentorSkillsRepository.deleteAllByUser(user);
		}

		for (String skillName : skillNames.split(",")) {
			mentorSkillsRepository.add(userName, skillName);
		}
		return "Saved";
	}

	@GetMapping(path = "/all/{userName}")
	public @ResponseBody Object getMentorCalendar(@PathVariable(value = "userName") String userName) {
		Optional<Users> optional = userRepository.findByUserName(userName);
		HashMap<String, Boolean> map = new HashMap<>();

		if (optional.isPresent()) {
			Users user = optional.get();
			// This returns a JSON or XML with the users
			return mentorSkillsRepository.findAllByUser(user);
		} else {
			// user not exist
			map.put("userExist", false);
			return map;
		}
	}
}
